
@{
    ViewBag.Title = "RPAsistencia";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <h2 class="text-black border-bottom border-info shadow-lg mt-05">REPORTE DE ASISTENCIA</h2>
}


@Styles.Render("~/Content/css")
<main class="maincl">
    <div class="principal1  shadow-lg">
        <div class="card">
            <div>
                <div class="container d-flex mb-2 mt-2 ">
                    <div class="input-group mr-2">
                        <span class="input-group-text" id="basic-addon1">Desde</span>
                        <input type="date" class="form-control pr-2" id="Desde" aria-label="Nombre de usuario" aria-describedby="basic-addon1" required>
                    </div>
        
                    <div class="input-group">
                        <span class="input-group-text" id="basic-addon1">Hasta</span>
                        <input type="date" class="form-control metrica" id="Hasta" aria-label="Nombre de usuario" aria-describedby="basic-addon1" required>
                    </div>
                  
                    <select id="tipo" class="form-select h-auto ms-1" aria-label="Default select example">
                        <option selected>Tipo asistencia</option>
                        <option value="1">Miembros</option>
                        <option value="2">Visitas</option>
                        <option value="3">Encargados</option>
                    </select>
                </div>
                <div class="container">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Nombre del asistente</span>
                        <input type="text" class="form-control " id="user" placeholder="Nombre del Asistente" aria-label="Nombre de usuario" aria-describedby="basic-addon1" required>
                      
                        <select id="tipo" class="form-select h-auto ms-1" aria-label="Default select example">
                            <option selected>Tareas de encargados</option>
                            <option value="1">Limpieza y arreglo</option>
                            <option value="2">Control sonido y visuales</option>
                            <option value="3">Encargados de canto</option>
                            <option value="4">Encargados de Recepcion</option>
                            <option value="5">Encargados de Mensaje</option>
                            <option value="6">Encargados de Transporte</option>
                            <option value="7">Encargados de ofrendas</option>
                            <option value="8">Encargados de Comida</option>
                            <option value="9">Encargados de visitas</option>
                            <option value="10">Encargados de registro de asistentes</option>
                            <option value="11">Encargados de limpieza y arreglo post evento</option>
                            <option value="12">Encargados de niños</option>
                            <option value="13">Encargados de dinamicas</option>
                            <option value="14">Encargados de entrega de paquetes</option>
                            <option value="15">Encargados de entrega de comida</option>
                            <option value="16">Encargados de evento</option>
                            <option value="17">Encargados de canto</option>
                            <option value="18">Encargados de Mujeres</option>
                            <option value="19">Encargados de Varones</option>
                            <option value="20">Encargados de Ancianos</option>
                            <option value="21">Encargados de adolecentes</option>
                            <option value="22">ninguno</option>
                        </select>
                        <button type="button" onclick="buscar()" class="btn btn-success mr-1">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                            </svg>
                            Buscar
                        </button>
                    </div>

                </div>
            </div>

        </div>


        <div id="Reportrecicler" class="contenedor_P bg-light" style="text-align:center; display:none;">
           
            <div class="elemento_S" id="hot"></div>

        </div>
    </div>

</main>



<script>

    function buscar() {

        var sr = document.getElementById("Reportrecicler");
        sr.style.display = "";
        var url2 = "@Url.Action("Reportasistente", "Event")";
        var FI = $("#Desde").val()
        var FF = $("#Hasta").val()

        if (FF == "" || FI == "") {
            alert("Campos de fecha no pueden estar vacios")
        } else {
            data = {
                FI,
                FF,
                USER: $("#user").val(),
            }
            console.log(data);
            $.post(url2, data).done(function (data) {
                console.log(data);
                Mostrarxls(data.data)
                generarXLS(FI, FF, data.data)
                generarXLS(data.data)
            });
        }
    }
    function Mostrarxls(data){
        // Configuración de Handsontable
        var container = document.getElementById('hot');
        var hot = new Handsontable(container, {
            licenseKey: 'non-commercial-and-evaluation',
            data: data,
            colHeaders: ['ID', 'Nombre', 'Fecha', 'LugarEvento', 'Descripcion', 'estado', 'Usuario','Cargo'],
            columns: [
                { data: 'IdAsistente' },
                { data: 'IdEvento' },
                { data: 'Nombre_completo' },
                { data: 'Nombre' },
                { data: 'Fecha' },
                { data: 'Descripcion' },
                { data: 'TipoAsistente' },
            ]
        });
    }
    function generarXLS(desde, hasta, data) {
        // Crear un nuevo libro de trabajo
        const workbook = new ExcelJS.Workbook();
        // Crear una nueva hoja de cálculo
        const worksheet = workbook.addWorksheet('Datos');

  

        // Fusionar celdas y establecer el texto 'desde' en A2:C2
        const desdeCell = worksheet.getCell('A2');
        desdeCell.value = 'desde ' + desde;
        worksheet.mergeCells('A2:C2');

        // Fusionar celdas y establecer el texto 'hasta' en D2:F2
        const hastaCell = worksheet.getCell('D2');
        hastaCell.value = 'hasta ' + hasta;
        worksheet.mergeCells('D2:F2');

        // Fusionar celdas y establecer el texto 'REPORTE GENERAL DE ASISTENCIAS' en A3:F3
        const reportCell = worksheet.getCell('A3');
        reportCell.value = 'REPORTE GENERAL DE ASISTENCIAS';
        reportCell.alignment = { horizontal: 'center' };
        reportCell.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FF0000FF' } // Fondo azul
        };
        worksheet.mergeCells('A3:F3');

        const reportCell1 = worksheet.getCell('A4');
        reportCell1.value1 = '';
        reportCell1.alignment = { horizontal: 'center' };
      
       
        // Configurar los encabezados de columna
        worksheet.columns = [
            { header: 'ID', key: 'IdAsistente' },
            { header: 'Nombre', key: 'Nombre_completo' },
            { header: 'Fecha', key: 'Fecha' },
            { header: 'LugarEvento', key: 'Nombre' },
            { header: 'Descripcion', key: 'Descripcion' },
            { header: 'estado', key: 'TipoAsistente' },
        ];

        // Aplicar estilos a los encabezados de columna
        const headerRow = worksheet.getRow(1);
        headerRow.eachCell((cell) => {
            cell.font = { color: { argb: '000000' } }; // Color de fuente negro (hexadecimal)
            cell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FF006400' } // Color de fondo verde oscuro (hexadecimal)
            };
        });

        // Agregar los datos a la hoja de cálculo
        // Agregar los datos a la hoja de cálculo
        data.forEach((row, index) => {
            const newRow = worksheet.addRow(row);
            newRow.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' },
                };
            });

            // Verificar si es la primera fila de datos (después de los encabezados)
            if (index === 0) {
                // Obtener la última celda de la fila
                const lastCell = newRow.getCell(worksheet.columns.length);
                // Fusionar las celdas desde A4 hasta la última celda de la fila
                worksheet.mergeCells(`A4:${lastCell.address}`);
            }
        });

        // Fusionar celdas y establecer el texto 'ASISTENCIAS IBH' en A1:F1
        const titleCell = worksheet.getCell('A1');
        titleCell.value = 'ASISTENCIAS IBH';
        titleCell.alignment = { horizontal: 'center' };
        titleCell.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FF0000FF' } // Fondo azul
        };
        worksheet.mergeCells('A1:F1');
        // Generar el archivo de Excel
        workbook.xlsx.writeBuffer().then((buffer) => {
            // Descargar el archivo
            const blob = new Blob([buffer], { type: 'application/octet-stream' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'asistencias.xlsx';
            link.click();
            URL.revokeObjectURL(url);
        });
    }
  
</script>